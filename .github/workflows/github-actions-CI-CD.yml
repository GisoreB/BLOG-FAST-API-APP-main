on: [push, pull_request]
jobs:
  CI:
    environment:
      name: Testing
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: List repository files
        run: |
          ls ${{ github.workspace }}
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: upgrade pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: Testing with pytest
        run: pytest -v -s
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_cicd:latest

  CD:
    runs-on: ubuntu-latest
    needs: [CI]
    environment:
      name: Production
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: deployment on Render
        uses: sws2apps/render-deployment@main 
        with:
          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
          apiKey: ${{ secrets.RENDER_API_KEY }}
          multipleDeployment: false

      # - name: deployment on Heroku and install Heroku CLI 
      #   run: |
      #     curl https://cli-assets.heroku.com/install.sh | sh 
      # - uses: akhileshns/heroku-deploy@v3.14.15 
      #   with:
      #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #     heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
      #     heroku_email: ${{secrets.HEROKU_EMAIL}}

      # - name: deploying to ubuntu server on AWS, AZURE, GCP, Digital Ocean and many more.
      #   uses: appleboy/ssh-action@v1
      #   with:
      #     host: ${{ secrets.PROD_HOST }}
      #     username: ${{ secrets.PROD_USERNAME }}
      #     password: ${{ secrets.PROD_PASSWORD }}
      #     port: ${{ secrets.PORT }}
      #     script: |
      #       cd app/src
      #       git pull
      #       echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart api